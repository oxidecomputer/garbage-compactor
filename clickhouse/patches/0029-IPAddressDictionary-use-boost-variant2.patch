From b19afd02b0519543c0148d8eabe538bf7d133665 Mon Sep 17 00:00:00 2001
From: Oxide Computer Company <eng@oxide.computer>
Date: Wed, 22 Nov 2023 11:48:22 +0000
Subject: [PATCH 29/61] IPAddressDictionary: use boost::variant2

For unknown reasons, using std::variant here fails during compilation.
Attempting to store a std::string in the variant results in
the compiler resolving the best variant option as wide::integer
(which is obviously wrong) and attempting to cast a std::string into a
wide::integer triggers an assertion.

Using boost's variant2 works.
---
 src/Dictionaries/IPAddressDictionary.cpp | 32 +++++++++++++-----------
 src/Dictionaries/IPAddressDictionary.h   |  9 ++++---
 2 files changed, 22 insertions(+), 19 deletions(-)

diff --git a/src/Dictionaries/IPAddressDictionary.cpp b/src/Dictionaries/IPAddressDictionary.cpp
index 6bb06de750..1b05f8768c 100644
--- a/src/Dictionaries/IPAddressDictionary.cpp
+++ b/src/Dictionaries/IPAddressDictionary.cpp
@@ -23,6 +23,8 @@
 
 namespace DB
 {
+using namespace boost::variant2;
+
 namespace ErrorCodes
 {
     extern const int BAD_ARGUMENTS;
@@ -240,7 +242,7 @@ ColumnPtr IPAddressDictionary::getColumn(
         using ValueType = DictionaryValueType<AttributeType>;
         using ColumnProvider = DictionaryAttributeColumnProvider<AttributeType>;
 
-        const auto & null_value = std::get<AttributeType>(attribute.null_values);
+        const auto & null_value = get<AttributeType>(attribute.null_values);
         DictionaryDefaultValueExtractor<AttributeType> default_value_extractor(null_value, default_values_column);
 
         auto column = ColumnProvider::getColumn(dictionary_attribute, size);
@@ -532,7 +534,7 @@ void IPAddressDictionary::loadData()
 template <typename T>
 void IPAddressDictionary::addAttributeSize(const Attribute & attribute)
 {
-    const auto & vec = std::get<ContainerType<T>>(attribute.maps);
+    const auto & vec = get<ContainerType<T>>(attribute.maps);
     bytes_allocated += sizeof(ContainerType<T>) + (vec.capacity() * sizeof(T));
     bucket_count = vec.size();
 }
@@ -546,11 +548,11 @@ void IPAddressDictionary::addAttributeSize<String>(const Attribute & attribute)
 
 void IPAddressDictionary::calculateBytesAllocated()
 {
-    if (auto * ipv4_col = std::get_if<IPv4Container>(&ip_column))
+    if (auto * ipv4_col = get_if<IPv4Container>(&ip_column))
     {
         bytes_allocated += ipv4_col->size() * sizeof((*ipv4_col)[0]);
     }
-    else if (auto * ipv6_col = std::get_if<IPv6Container>(&ip_column))
+    else if (auto * ipv6_col = get_if<IPv6Container>(&ip_column))
     {
         bytes_allocated += ipv6_col->size() * sizeof((*ipv6_col)[0]);
     }
@@ -619,9 +621,9 @@ void IPAddressDictionary::getItemsByTwoKeyColumnsImpl(
 {
     const auto & first_column = key_columns.front();
     const size_t rows = first_column->size();
-    auto & vec = std::get<ContainerType<AttributeType>>(attribute.maps);
+    auto & vec = get<ContainerType<AttributeType>>(attribute.maps);
 
-    if (const auto * ipv4_col = std::get_if<IPv4Container>(&ip_column))
+    if (const auto * ipv4_col = get_if<IPv4Container>(&ip_column))
     {
         const auto * key_ip_column_ptr = typeid_cast<const ColumnVector<UInt32> *>(&*key_columns.front());
         if (key_ip_column_ptr == nullptr)
@@ -663,7 +665,7 @@ void IPAddressDictionary::getItemsByTwoKeyColumnsImpl(
 
     const auto & key_mask_column = assert_cast<const ColumnVector<UInt8> &>(*key_columns.back());
 
-    const auto * ipv6_col = std::get_if<IPv6Container>(&ip_column);
+    const auto * ipv6_col = get_if<IPv6Container>(&ip_column);
     auto comp_v6 = [&](size_t i, const IPv6Subnet & target)
     {
         auto cmpres = memcmp16(getIPv6FromOffset(*ipv6_col, i), target.addr);
@@ -709,7 +711,7 @@ void IPAddressDictionary::getItemsImpl(
         return;
     }
 
-    auto & vec = std::get<ContainerType<AttributeType>>(attribute.maps);
+    auto & vec = get<ContainerType<AttributeType>>(attribute.maps);
 
     size_t keys_found = 0;
 
@@ -759,7 +761,7 @@ void IPAddressDictionary::getItemsImpl(
 template <typename T>
 void IPAddressDictionary::setAttributeValueImpl(Attribute & attribute, const T value)
 {
-    auto & vec = std::get<ContainerType<T>>(attribute.maps);
+    auto & vec = get<ContainerType<T>>(attribute.maps);
     vec.push_back(value);
 }
 
@@ -796,7 +798,7 @@ const IPAddressDictionary::Attribute & IPAddressDictionary::getAttribute(const s
 
 Columns IPAddressDictionary::getKeyColumns() const
 {
-    const auto * ipv4_col = std::get_if<IPv4Container>(&ip_column);
+    const auto * ipv4_col = get_if<IPv4Container>(&ip_column);
     if (ipv4_col)
     {
         auto key_ip_column = ColumnVector<UInt32>::create();
@@ -809,7 +811,7 @@ Columns IPAddressDictionary::getKeyColumns() const
         return {std::move(key_ip_column), std::move(key_mask_column)};
     }
 
-    const auto * ipv6_col = std::get_if<IPv6Container>(&ip_column);
+    const auto * ipv6_col = get_if<IPv6Container>(&ip_column);
 
     auto key_ip_column = ColumnFixedString::create(IPV6_BINARY_LENGTH);
     auto key_mask_column = ColumnVector<UInt8>::create();
@@ -850,7 +852,7 @@ static auto keyViewGetter()
 
 Pipe IPAddressDictionary::read(const Names & column_names, size_t max_block_size, size_t num_streams) const
 {
-    const bool is_ipv4 = std::get_if<IPv4Container>(&ip_column) != nullptr;
+    const bool is_ipv4 = get_if<IPv4Container>(&ip_column) != nullptr;
 
     auto key_columns = getKeyColumns();
 
@@ -892,7 +894,7 @@ IPAddressDictionary::RowIdxConstIter IPAddressDictionary::ipNotFound() const
 
 IPAddressDictionary::RowIdxConstIter IPAddressDictionary::tryLookupIPv4(UInt32 addr, uint8_t * buf) const
 {
-    if (std::get_if<IPv6Container>(&ip_column))
+    if (get_if<IPv6Container>(&ip_column))
     {
         mapIPv4ToIPv6(addr, buf);
         return lookupIP<IPv6Container>(buf);
@@ -902,7 +904,7 @@ IPAddressDictionary::RowIdxConstIter IPAddressDictionary::tryLookupIPv4(UInt32 a
 
 IPAddressDictionary::RowIdxConstIter IPAddressDictionary::tryLookupIPv6(const uint8_t * addr) const
 {
-    if (std::get_if<IPv4Container>(&ip_column))
+    if (get_if<IPv4Container>(&ip_column))
     {
         bool is_mapped = false;
         UInt32 addrv4 = mappedIPv4ToBinary(addr, is_mapped);
@@ -919,7 +921,7 @@ IPAddressDictionary::RowIdxConstIter IPAddressDictionary::lookupIP(IPValueType t
     if (row_idx.empty())
         return ipNotFound();
 
-    const auto * ipv4or6_col = std::get_if<IPContainerType>(&ip_column);
+    const auto * ipv4or6_col = get_if<IPContainerType>(&ip_column);
     if (ipv4or6_col == nullptr)
         return ipNotFound();
 
diff --git a/src/Dictionaries/IPAddressDictionary.h b/src/Dictionaries/IPAddressDictionary.h
index 40dc5dd678..b8b16e969e 100644
--- a/src/Dictionaries/IPAddressDictionary.h
+++ b/src/Dictionaries/IPAddressDictionary.h
@@ -2,7 +2,7 @@
 
 #include <atomic>
 #include <memory>
-#include <variant>
+#include <boost/variant2.hpp>
 #include <Columns/ColumnDecimal.h>
 #include <Columns/ColumnString.h>
 #include <Common/HashTable/HashMap.h>
@@ -17,6 +17,7 @@
 
 namespace DB
 {
+using namespace boost::variant2;
 class Arena;
 
 class IPAddressDictionary final : public IDictionary
@@ -97,7 +98,7 @@ private:
     struct Attribute final
     {
         AttributeUnderlyingType type;
-        std::variant<
+        variant<
             UInt8,
             UInt16,
             UInt32,
@@ -123,7 +124,7 @@ private:
             String,
             Array>
             null_values;
-        std::variant<
+        variant<
             ContainerType<UInt8>,
             ContainerType<UInt16>,
             ContainerType<UInt32>,
@@ -205,7 +206,7 @@ private:
     const std::string key_description{dict_struct.getKeyDescription()};
 
     /// Contains sorted IP subnetworks. If some addresses equals, subnet with lower mask is placed first.
-    std::variant<IPv4Container, IPv6Container> ip_column;
+    variant<IPv4Container, IPv6Container> ip_column;
 
     /// Prefix lengths corresponding to ip_column.
     IPMaskContainer mask_column;
-- 
2.40.1

