From d00aac20230ba95828578085f686789971f99b14 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex@cooperi.net>
Date: Tue, 6 Jun 2023 13:46:32 +1000
Subject: [PATCH 37/42] 39-sunos-signed-char.patch

---
 base/base/types.h                   | 4 ++++
 src/Core/SettingsEnums.h            | 2 +-
 src/DataTypes/DataTypeEnum.cpp      | 2 +-
 src/Functions/divide/divide.cpp     | 2 ++
 src/Functions/divide/divideImpl.cpp | 2 ++
 5 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/base/base/types.h b/base/base/types.h
index e178653f7c..779a4dcdd4 100644
--- a/base/base/types.h
+++ b/base/base/types.h
@@ -3,7 +3,11 @@
 #include <cstdint>
 #include <string>
 
+#if defined(__sun)
+using Int8 = signed char;
+#else
 using Int8 = int8_t;
+#endif
 using Int16 = int16_t;
 using Int32 = int32_t;
 using Int64 = int64_t;
diff --git a/src/Core/SettingsEnums.h b/src/Core/SettingsEnums.h
index 308d53ff69..6fcd9629ba 100644
--- a/src/Core/SettingsEnums.h
+++ b/src/Core/SettingsEnums.h
@@ -87,7 +87,7 @@ DECLARE_SETTING_ENUM(LogsLevel)
 
 
 // Make it signed for compatibility with DataTypeEnum8
-enum QueryLogElementType : int8_t
+enum QueryLogElementType : Int8
 {
     QUERY_START = 1,
     QUERY_FINISH = 2,
diff --git a/src/DataTypes/DataTypeEnum.cpp b/src/DataTypes/DataTypeEnum.cpp
index c58e186b98..df5bd51a18 100644
--- a/src/DataTypes/DataTypeEnum.cpp
+++ b/src/DataTypes/DataTypeEnum.cpp
@@ -55,7 +55,7 @@ std::string DataTypeEnum<Type>::generateName(const Values & values)
 
         writeQuotedString(name_and_value.first, out);
         writeString(" = ", out);
-        writeText(name_and_value.second, out);
+        writeIntText(name_and_value.second, out);
     }
 
     writeChar(')', out);
diff --git a/src/Functions/divide/divide.cpp b/src/Functions/divide/divide.cpp
index cf2cd354a7..879fcc76b3 100644
--- a/src/Functions/divide/divide.cpp
+++ b/src/Functions/divide/divide.cpp
@@ -50,8 +50,10 @@ template void divideImpl<int64_t, int64_t, int64_t>(const int64_t * __restrict,
 template void divideImpl<int64_t, int32_t, int64_t>(const int64_t * __restrict, int32_t, int64_t * __restrict, size_t);
 template void divideImpl<int64_t, int16_t, int64_t>(const int64_t * __restrict, int16_t, int64_t * __restrict, size_t);
 template void divideImpl<int64_t, int8_t, int64_t>(const int64_t * __restrict, int8_t, int64_t * __restrict, size_t);
+template void divideImpl<int64_t, signed char, int64_t>(const int64_t * __restrict, signed char, int64_t * __restrict, size_t);
 
 template void divideImpl<int32_t, int64_t, int32_t>(const int32_t * __restrict, int64_t, int32_t * __restrict, size_t);
 template void divideImpl<int32_t, int32_t, int32_t>(const int32_t * __restrict, int32_t, int32_t * __restrict, size_t);
 template void divideImpl<int32_t, int16_t, int32_t>(const int32_t * __restrict, int16_t, int32_t * __restrict, size_t);
 template void divideImpl<int32_t, int8_t, int32_t>(const int32_t * __restrict, int8_t, int32_t * __restrict, size_t);
+template void divideImpl<int32_t, signed char, int32_t>(const int32_t * __restrict, signed char, int32_t * __restrict, size_t);
diff --git a/src/Functions/divide/divideImpl.cpp b/src/Functions/divide/divideImpl.cpp
index 6c151dfefb..29f6cafe99 100644
--- a/src/Functions/divide/divideImpl.cpp
+++ b/src/Functions/divide/divideImpl.cpp
@@ -62,10 +62,12 @@ template void divideImpl<int64_t, int64_t, int64_t>(const int64_t * __restrict,
 template void divideImpl<int64_t, int32_t, int64_t>(const int64_t * __restrict, int32_t, int64_t * __restrict, size_t);
 template void divideImpl<int64_t, int16_t, int64_t>(const int64_t * __restrict, int16_t, int64_t * __restrict, size_t);
 template void divideImpl<int64_t, int8_t, int64_t>(const int64_t * __restrict, int8_t, int64_t * __restrict, size_t);
+template void divideImpl<int64_t, signed char, int64_t>(const int64_t * __restrict, signed char, int64_t * __restrict, size_t);
 
 template void divideImpl<int32_t, int64_t, int32_t>(const int32_t * __restrict, int64_t, int32_t * __restrict, size_t);
 template void divideImpl<int32_t, int32_t, int32_t>(const int32_t * __restrict, int32_t, int32_t * __restrict, size_t);
 template void divideImpl<int32_t, int16_t, int32_t>(const int32_t * __restrict, int16_t, int32_t * __restrict, size_t);
 template void divideImpl<int32_t, int8_t, int32_t>(const int32_t * __restrict, int8_t, int32_t * __restrict, size_t);
+template void divideImpl<int32_t, signed char, int32_t>(const int32_t * __restrict, signed char, int32_t * __restrict, size_t);
 
 }
-- 
2.40.1

