From cf21f9bd2c46a73bb8e0c0641c79e8d8c4af9930 Mon Sep 17 00:00:00 2001
From: Alex Wilson <alex@cooperi.net>
Date: Wed, 7 Jun 2023 09:37:48 +1000
Subject: [PATCH 39/42] 41-sunos-libunwind.patch

diff -wpruN --no-dereference '--exclude=*.orig' a~/CMakeLists.txt a/CMakeLists.txt
--- a~/CMakeLists.txt	1970-01-01 00:00:00
+++ a/CMakeLists.txt	1970-01-01 00:00:00
@@ -260,7 +260,7 @@ include(cmake/cpu_features.cmake)
 # Asynchronous unwind tables are needed for Query Profiler.
 # They are already by default on some platforms but possibly not on all platforms.
 # Enable it explicitly.
-set (COMPILER_FLAGS "${COMPILER_FLAGS} -fasynchronous-unwind-tables")
+#set (COMPILER_FLAGS "${COMPILER_FLAGS} -fasynchronous-unwind-tables")
 
 # Reproducible builds.
 if (CMAKE_BUILD_TYPE_UC STREQUAL "DEBUG")
diff -wpruN --no-dereference '--exclude=*.orig' a~/contrib/libunwind/src/AddressSpace.hpp a/contrib/libunwind/src/AddressSpace.hpp
--- a~/contrib/libunwind/src/AddressSpace.hpp	1970-01-01 00:00:00
+++ a/contrib/libunwind/src/AddressSpace.hpp	1970-01-01 00:00:00
@@ -426,7 +426,11 @@ static bool checkAddrInSegment(const Elf
 static bool checkForUnwindInfoSegment(const Elf_Phdr *phdr, size_t image_base,
                                       dl_iterate_cb_data *cbdata) {
 #if defined(_LIBUNWIND_SUPPORT_DWARF_INDEX)
+#if defined(PT_SUNW_UNWIND)
+  if (phdr->p_type == PT_SUNW_EH_FRAME || phdr->p_type == PT_SUNW_UNWIND) {
+#else
   if (phdr->p_type == PT_GNU_EH_FRAME) {
+#endif
     EHHeaderParser<LocalAddressSpace>::EHHeaderInfo hdrInfo;
     uintptr_t eh_frame_hdr_start = image_base + phdr->p_vaddr;
     cbdata->sects->dwarf_index_section = eh_frame_hdr_start;
diff -wpruN --no-dereference '--exclude=*.orig' a~/contrib/libunwind/src/libunwind.cpp a/contrib/libunwind/src/libunwind.cpp
--- a~/contrib/libunwind/src/libunwind.cpp	1970-01-01 00:00:00
+++ a/contrib/libunwind/src/libunwind.cpp	1970-01-01 00:00:00
@@ -26,7 +26,7 @@
 #include <sanitizer/asan_interface.h>
 #endif
 
-#if !defined(__USING_SJLJ_EXCEPTIONS__)
+//#if !defined(__USING_SJLJ_EXCEPTIONS__)
 #include "AddressSpace.hpp"
 #include "UnwindCursor.hpp"
 
@@ -336,7 +336,6 @@ void __unw_remove_dynamic_eh_frame_secti
 }
 
 #endif // defined(_LIBUNWIND_SUPPORT_DWARF_UNWIND)
-#endif // !defined(__USING_SJLJ_EXCEPTIONS__)
 
 int unw_backtrace(void **buffer, int size) {
   unw_context_t context;
diff -wpruN --no-dereference '--exclude=*.orig' a~/contrib/libunwind/src/UnwindRegistersRestore.S a/contrib/libunwind/src/UnwindRegistersRestore.S
--- a~/contrib/libunwind/src/UnwindRegistersRestore.S	1970-01-01 00:00:00
+++ a/contrib/libunwind/src/UnwindRegistersRestore.S	1970-01-01 00:00:00
@@ -14,7 +14,7 @@
   .text
 #endif
 
-#if !defined(__USING_SJLJ_EXCEPTIONS__)
+//#if !defined(__USING_SJLJ_EXCEPTIONS__)
 
 #if defined(__i386__)
 DEFINE_LIBUNWIND_FUNCTION(__libunwind_Registers_x86_jumpto)
@@ -1291,7 +1291,7 @@ DEFINE_LIBUNWIND_FUNCTION(_ZN9libunwind1
 
 #endif
 
-#endif /* !defined(__USING_SJLJ_EXCEPTIONS__) */
+//#endif /* !defined(__USING_SJLJ_EXCEPTIONS__) */
 
 NO_EXEC_STACK_DIRECTIVE
 
diff -wpruN --no-dereference '--exclude=*.orig' a~/contrib/libunwind/src/UnwindRegistersSave.S a/contrib/libunwind/src/UnwindRegistersSave.S
--- a~/contrib/libunwind/src/UnwindRegistersSave.S	1970-01-01 00:00:00
+++ a/contrib/libunwind/src/UnwindRegistersSave.S	1970-01-01 00:00:00
@@ -14,7 +14,7 @@
     .text
 #endif
 
-#if !defined(__USING_SJLJ_EXCEPTIONS__)
+//#if !defined(__USING_SJLJ_EXCEPTIONS__)
 
 #if defined(__i386__)
 
@@ -1226,6 +1226,6 @@ DEFINE_LIBUNWIND_FUNCTION(__unw_getconte
 
   WEAK_ALIAS(__unw_getcontext, unw_getcontext)
 
-#endif /* !defined(__USING_SJLJ_EXCEPTIONS__) */
+//#endif /* !defined(__USING_SJLJ_EXCEPTIONS__) */
 
 NO_EXEC_STACK_DIRECTIVE
diff -wpruN --no-dereference '--exclude=*.orig' a~/contrib/libunwind-cmake/CMakeLists.txt a/contrib/libunwind-cmake/CMakeLists.txt
--- a~/contrib/libunwind-cmake/CMakeLists.txt	1970-01-01 00:00:00
+++ a/contrib/libunwind-cmake/CMakeLists.txt	1970-01-01 00:00:00
@@ -42,12 +42,16 @@ add_library(unwind ${LIBUNWIND_SOURCES})
 set_target_properties(unwind PROPERTIES FOLDER "contrib/libunwind-cmake")
 
 target_include_directories(unwind SYSTEM BEFORE PUBLIC $<BUILD_INTERFACE:${LIBUNWIND_SOURCE_DIR}/include>)
-target_compile_definitions(unwind PRIVATE -D_LIBUNWIND_NO_HEAP=1 -D_DEBUG -D_LIBUNWIND_IS_NATIVE_ONLY)
+target_compile_definitions(unwind PRIVATE -D_LIBUNWIND_NO_HEAP=1 -D_DEBUG -D_LIBUNWIND_IS_NATIVE_ONLY -D_REENTRANT -D__EXTENSIONS__)
 
 # We should enable optimizations (otherwise it will be too slow in debug)
 # and disable sanitizers (otherwise infinite loop may happen)
 target_compile_options(unwind PRIVATE -O3 -fno-exceptions -funwind-tables -fno-sanitize=all $<$<COMPILE_LANGUAGE:CXX>:-nostdinc++ -fno-rtti>)
 
+if (OS_SUNOS)
+    target_compile_definitions(unwind PRIVATE -D_LIBUNWIND_USE_DL_ITERATE_PHDR)
+endif()
+
 check_c_compiler_flag(-Wunused-but-set-variable HAVE_WARNING_UNUSED_BUT_SET_VARIABLE)
 if (HAVE_WARNING_UNUSED_BUT_SET_VARIABLE)
     target_compile_options(unwind PRIVATE -Wno-unused-but-set-variable)
diff -wpruN --no-dereference '--exclude=*.orig' a~/src/CMakeLists.txt a/src/CMakeLists.txt
--- a~/src/CMakeLists.txt	1970-01-01 00:00:00
+++ a/src/CMakeLists.txt	1970-01-01 00:00:00
@@ -267,6 +267,8 @@ endmacro ()
 dbms_target_include_directories (PUBLIC "${ClickHouse_SOURCE_DIR}/src" "${ClickHouse_BINARY_DIR}/src")
 target_include_directories (clickhouse_common_io PUBLIC "${ClickHouse_SOURCE_DIR}/src" "${ClickHouse_BINARY_DIR}/src")
 
+target_include_directories (clickhouse_common_io PUBLIC "${ClickHouse_SOURCE_DIR}/contrib/libunwind/include")
+
 if (TARGET ch_contrib::llvm)
     dbms_target_link_libraries (PUBLIC ch_contrib::llvm)
 endif ()
