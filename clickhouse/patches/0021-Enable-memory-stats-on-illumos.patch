From 5b736a9892e590afd865791da1a58999e6254b13 Mon Sep 17 00:00:00 2001
From: Oxide Computer Company <eng@oxide.computer>
Date: Wed, 22 Nov 2023 11:47:24 +0000
Subject: [PATCH 21/61] Enable memory stats on illumos

---
 src/Common/AsynchronousMetrics.cpp |  8 +++--
 src/Common/AsynchronousMetrics.h   |  2 +-
 src/Common/MemoryStatisticsOS.cpp  | 51 +++++++++++++++++++++++++++++-
 src/Common/MemoryStatisticsOS.h    |  5 ++-
 4 files changed, 60 insertions(+), 6 deletions(-)

diff --git a/src/Common/AsynchronousMetrics.cpp b/src/Common/AsynchronousMetrics.cpp
index 36c87010fa..f162796a7f 100644
--- a/src/Common/AsynchronousMetrics.cpp
+++ b/src/Common/AsynchronousMetrics.cpp
@@ -566,7 +566,7 @@ void AsynchronousMetrics::update(TimePoint update_time)
         "The difference in time the thread for calculation of the asynchronous metrics was scheduled to wake up and the time it was in fact, woken up."
         " A proxy-indicator of overall system latency and responsiveness." };
 
-#if defined(OS_LINUX) || defined(OS_FREEBSD)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SUNOS)
     MemoryStatisticsOS::Data memory_statistics_data = memory_stat.get();
 #endif
 
@@ -596,7 +596,7 @@ void AsynchronousMetrics::update(TimePoint update_time)
 #endif
 
     /// Process process memory usage according to OS
-#if defined(OS_LINUX) || defined(OS_FREEBSD)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SUNOS)
     {
         MemoryStatisticsOS::Data & data = memory_statistics_data;
 
@@ -606,18 +606,20 @@ void AsynchronousMetrics::update(TimePoint update_time)
             " The large values of this metric are totally normal, and makes only technical sense."};
         new_values["MemoryResident"] = { data.resident,
             "The amount of physical memory used by the server process, in bytes." };
-#if !defined(OS_FREEBSD)
+#if !defined(OS_FREEBSD) && !defined(OS_SUNOS)
         new_values["MemoryShared"] = { data.shared,
             "The amount of memory used by the server process, that is also shared by another processes, in bytes."
             " ClickHouse does not use shared memory, but some memory can be labeled by OS as shared for its own reasons."
             " This metric does not make a lot of sense to watch, and it exists only for completeness reasons."};
 #endif
+#if !defined(OS_SUNOS)
         new_values["MemoryCode"] = { data.code,
             "The amount of virtual memory mapped for the pages of machine code of the server process, in bytes." };
         new_values["MemoryDataAndStack"] = { data.data_and_stack,
             "The amount of virtual memory mapped for the use of stack and for the allocated memory, in bytes."
             " It is unspecified whether it includes the per-thread stacks and most of the allocated memory, that is allocated with the 'mmap' system call."
             " This metric exists only for completeness reasons. I recommend to use the `MemoryResident` metric for monitoring."};
+#endif
 
         /// We must update the value of total_memory_tracker periodically.
         /// Otherwise it might be calculated incorrectly - it can include a "drift" of memory amount.
diff --git a/src/Common/AsynchronousMetrics.h b/src/Common/AsynchronousMetrics.h
index e3b5142553..e46b7f227d 100644
--- a/src/Common/AsynchronousMetrics.h
+++ b/src/Common/AsynchronousMetrics.h
@@ -95,7 +95,7 @@ private:
     bool quit {false};
     AsynchronousMetricValues values;
 
-#if defined(OS_LINUX) || defined(OS_FREEBSD)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SUNOS)
     MemoryStatisticsOS memory_stat;
 #endif
 
diff --git a/src/Common/MemoryStatisticsOS.cpp b/src/Common/MemoryStatisticsOS.cpp
index f2d2ab5fea..c3c041322c 100644
--- a/src/Common/MemoryStatisticsOS.cpp
+++ b/src/Common/MemoryStatisticsOS.cpp
@@ -1,7 +1,8 @@
-#if defined(OS_LINUX) || defined(OS_FREEBSD)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SUNOS)
 
 #include <sys/types.h>
 #include <sys/stat.h>
+
 #if defined(OS_FREEBSD)
 #include <sys/sysctl.h>
 #include <sys/user.h>
@@ -18,6 +19,10 @@
 #include <IO/ReadBufferFromMemory.h>
 #include <IO/ReadHelpers.h>
 
+#if defined(OS_SUNOS)
+#include <libproc.h>
+#undef C2
+#endif
 
 namespace DB
 {
@@ -156,6 +161,50 @@ MemoryStatisticsOS::Data MemoryStatisticsOS::get() const
 
 #endif
 
+#if defined(OS_SUNOS)
+
+namespace ErrorCodes
+{
+    extern const int FILE_DOESNT_EXIST;
+    extern const int CANNOT_OPEN_FILE;
+    extern const int CANNOT_READ_FROM_FILE_DESCRIPTOR;
+}
+
+MemoryStatisticsOS::MemoryStatisticsOS()
+{
+    pid_t self = ::getpid();
+    char fname[PATH_MAX];
+
+    (void) ::snprintf(fname, sizeof (fname), "/proc/%d/psinfo", self);
+    psinfo_fd = ::open(fname, O_RDONLY | O_CLOEXEC);
+    if (-1 == psinfo_fd) {
+        throwFromErrno("Cannot open file " + std::string(fname), errno == ENOENT ? ErrorCodes::FILE_DOESNT_EXIST : ErrorCodes::CANNOT_OPEN_FILE);
+    }
+}
+
+MemoryStatisticsOS::~MemoryStatisticsOS()
+{
+    ::close(psinfo_fd);
+}
+
+MemoryStatisticsOS::Data MemoryStatisticsOS::get() const
+{
+    Data data;
+    psinfo_t ps;
+    int rc;
+
+    rc = ::pread(psinfo_fd, &ps, sizeof (ps), 0);
+    if (rc < 0)
+        throwFromErrno("Cannot read from psinfo fd", ErrorCodes::CANNOT_READ_FROM_FILE_DESCRIPTOR);
+
+    data.virt = ps.pr_size * 1024;
+    data.resident = ps.pr_rssize * 1024;
+
+    return data;
+}
+
+#endif
+
 }
 
 #endif
diff --git a/src/Common/MemoryStatisticsOS.h b/src/Common/MemoryStatisticsOS.h
index 8eb6c871a9..ffd1e4a9aa 100644
--- a/src/Common/MemoryStatisticsOS.h
+++ b/src/Common/MemoryStatisticsOS.h
@@ -1,5 +1,5 @@
 #pragma once
-#if defined(OS_LINUX) || defined(OS_FREEBSD)
+#if defined(OS_LINUX) || defined(OS_FREEBSD) || defined(OS_SUNOS)
 #include <cstdint>
 #if defined(OS_FREEBSD)
 #include <unistd.h>
@@ -47,6 +47,9 @@ private:
     size_t pagesize;
     pid_t self;
 #endif
+#if defined(OS_SUNOS)
+    int psinfo_fd;
+#endif
 };
 
 }
-- 
2.40.1

